// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: api/orgSet/orgSet.proto

package orgSet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrgConf_GetOrgConf_FullMethodName = "/api.orgSet.OrgConf/GetOrgConf"
	OrgConf_SetOrgConf_FullMethodName = "/api.orgSet.OrgConf/SetOrgConf"
)

// OrgConfClient is the client API for OrgConf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrgConfClient interface {
	// 获取后台配置
	GetOrgConf(ctx context.Context, in *GetOrgConfRequest, opts ...grpc.CallOption) (*GetOrgConfResponse, error)
	// 设置后台配置
	SetOrgConf(ctx context.Context, in *SetOrgConfRequest, opts ...grpc.CallOption) (*SetOrgConfResponse, error)
}

type orgConfClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgConfClient(cc grpc.ClientConnInterface) OrgConfClient {
	return &orgConfClient{cc}
}

func (c *orgConfClient) GetOrgConf(ctx context.Context, in *GetOrgConfRequest, opts ...grpc.CallOption) (*GetOrgConfResponse, error) {
	out := new(GetOrgConfResponse)
	err := c.cc.Invoke(ctx, OrgConf_GetOrgConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgConfClient) SetOrgConf(ctx context.Context, in *SetOrgConfRequest, opts ...grpc.CallOption) (*SetOrgConfResponse, error) {
	out := new(SetOrgConfResponse)
	err := c.cc.Invoke(ctx, OrgConf_SetOrgConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgConfServer is the server API for OrgConf service.
// All implementations must embed UnimplementedOrgConfServer
// for forward compatibility
type OrgConfServer interface {
	// 获取后台配置
	GetOrgConf(context.Context, *GetOrgConfRequest) (*GetOrgConfResponse, error)
	// 设置后台配置
	SetOrgConf(context.Context, *SetOrgConfRequest) (*SetOrgConfResponse, error)
	mustEmbedUnimplementedOrgConfServer()
}

// UnimplementedOrgConfServer must be embedded to have forward compatible implementations.
type UnimplementedOrgConfServer struct {
}

func (UnimplementedOrgConfServer) GetOrgConf(context.Context, *GetOrgConfRequest) (*GetOrgConfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgConf not implemented")
}
func (UnimplementedOrgConfServer) SetOrgConf(context.Context, *SetOrgConfRequest) (*SetOrgConfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrgConf not implemented")
}
func (UnimplementedOrgConfServer) mustEmbedUnimplementedOrgConfServer() {}

// UnsafeOrgConfServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgConfServer will
// result in compilation errors.
type UnsafeOrgConfServer interface {
	mustEmbedUnimplementedOrgConfServer()
}

func RegisterOrgConfServer(s grpc.ServiceRegistrar, srv OrgConfServer) {
	s.RegisterService(&OrgConf_ServiceDesc, srv)
}

func _OrgConf_GetOrgConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgConfServer).GetOrgConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrgConf_GetOrgConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgConfServer).GetOrgConf(ctx, req.(*GetOrgConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgConf_SetOrgConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOrgConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgConfServer).SetOrgConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrgConf_SetOrgConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgConfServer).SetOrgConf(ctx, req.(*SetOrgConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrgConf_ServiceDesc is the grpc.ServiceDesc for OrgConf service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrgConf_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.orgSet.OrgConf",
	HandlerType: (*OrgConfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrgConf",
			Handler:    _OrgConf_GetOrgConf_Handler,
		},
		{
			MethodName: "SetOrgConf",
			Handler:    _OrgConf_SetOrgConf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/orgSet/orgSet.proto",
}
