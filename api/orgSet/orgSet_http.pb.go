// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.23.2
// source: api/orgSet/orgSet.proto

package orgSet

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOrgConfGetOrgConf = "/api.orgSet.OrgConf/GetOrgConf"
const OperationOrgConfSetOrgConf = "/api.orgSet.OrgConf/SetOrgConf"

type OrgConfHTTPServer interface {
	// GetOrgConf 获取后台配置
	GetOrgConf(context.Context, *GetOrgConfRequest) (*GetOrgConfResponse, error)
	// SetOrgConf 设置后台配置
	SetOrgConf(context.Context, *SetOrgConfRequest) (*SetOrgConfResponse, error)
}

func RegisterOrgConfHTTPServer(s *http.Server, srv OrgConfHTTPServer) {
	r := s.Route("/")
	r.POST("/GetOrgConf", _OrgConf_GetOrgConf0_HTTP_Handler(srv))
	r.POST("/SetOrgConfRequest", _OrgConf_SetOrgConf0_HTTP_Handler(srv))
}

func _OrgConf_GetOrgConf0_HTTP_Handler(srv OrgConfHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOrgConfRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrgConfGetOrgConf)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrgConf(ctx, req.(*GetOrgConfRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOrgConfResponse)
		return ctx.Result(200, reply)
	}
}

func _OrgConf_SetOrgConf0_HTTP_Handler(srv OrgConfHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetOrgConfRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrgConfSetOrgConf)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetOrgConf(ctx, req.(*SetOrgConfRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetOrgConfResponse)
		return ctx.Result(200, reply)
	}
}

type OrgConfHTTPClient interface {
	GetOrgConf(ctx context.Context, req *GetOrgConfRequest, opts ...http.CallOption) (rsp *GetOrgConfResponse, err error)
	SetOrgConf(ctx context.Context, req *SetOrgConfRequest, opts ...http.CallOption) (rsp *SetOrgConfResponse, err error)
}

type OrgConfHTTPClientImpl struct {
	cc *http.Client
}

func NewOrgConfHTTPClient(client *http.Client) OrgConfHTTPClient {
	return &OrgConfHTTPClientImpl{client}
}

func (c *OrgConfHTTPClientImpl) GetOrgConf(ctx context.Context, in *GetOrgConfRequest, opts ...http.CallOption) (*GetOrgConfResponse, error) {
	var out GetOrgConfResponse
	pattern := "/GetOrgConf"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrgConfGetOrgConf))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrgConfHTTPClientImpl) SetOrgConf(ctx context.Context, in *SetOrgConfRequest, opts ...http.CallOption) (*SetOrgConfResponse, error) {
	var out SetOrgConfResponse
	pattern := "/SetOrgConfRequest"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrgConfSetOrgConf))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
