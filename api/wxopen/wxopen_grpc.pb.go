// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: api/wxopen/wxopen.proto

package wxopen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Wxopen_GetAccessToken_FullMethodName      = "/api.wxopen.Wxopen/GetAccessToken"
	Wxopen_LoginQrCodeCreate_FullMethodName   = "/api.wxopen.Wxopen/LoginQrCodeCreate"
	Wxopen_GetWxUserInfoByCode_FullMethodName = "/api.wxopen.Wxopen/GetWxUserInfoByCode"
	Wxopen_LoginUrlCreate_FullMethodName      = "/api.wxopen.Wxopen/LoginUrlCreate"
)

// WxopenClient is the client API for Wxopen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WxopenClient interface {
	GetAccessToken(ctx context.Context, in *GetAccessTokenRequest, opts ...grpc.CallOption) (*GetAccessTokenResponse, error)
	LoginQrCodeCreate(ctx context.Context, in *LoginQrCodeCreateRequest, opts ...grpc.CallOption) (*LoginQrCodeCreateResponse, error)
	GetWxUserInfoByCode(ctx context.Context, in *GetWxUserInfoByCodeRequest, opts ...grpc.CallOption) (*GetWxUserInfoByCodeResponse, error)
	LoginUrlCreate(ctx context.Context, in *LoginUrlCreateRequest, opts ...grpc.CallOption) (*LoginUrlCreateResponse, error)
}

type wxopenClient struct {
	cc grpc.ClientConnInterface
}

func NewWxopenClient(cc grpc.ClientConnInterface) WxopenClient {
	return &wxopenClient{cc}
}

func (c *wxopenClient) GetAccessToken(ctx context.Context, in *GetAccessTokenRequest, opts ...grpc.CallOption) (*GetAccessTokenResponse, error) {
	out := new(GetAccessTokenResponse)
	err := c.cc.Invoke(ctx, Wxopen_GetAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxopenClient) LoginQrCodeCreate(ctx context.Context, in *LoginQrCodeCreateRequest, opts ...grpc.CallOption) (*LoginQrCodeCreateResponse, error) {
	out := new(LoginQrCodeCreateResponse)
	err := c.cc.Invoke(ctx, Wxopen_LoginQrCodeCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxopenClient) GetWxUserInfoByCode(ctx context.Context, in *GetWxUserInfoByCodeRequest, opts ...grpc.CallOption) (*GetWxUserInfoByCodeResponse, error) {
	out := new(GetWxUserInfoByCodeResponse)
	err := c.cc.Invoke(ctx, Wxopen_GetWxUserInfoByCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wxopenClient) LoginUrlCreate(ctx context.Context, in *LoginUrlCreateRequest, opts ...grpc.CallOption) (*LoginUrlCreateResponse, error) {
	out := new(LoginUrlCreateResponse)
	err := c.cc.Invoke(ctx, Wxopen_LoginUrlCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WxopenServer is the server API for Wxopen service.
// All implementations must embed UnimplementedWxopenServer
// for forward compatibility
type WxopenServer interface {
	GetAccessToken(context.Context, *GetAccessTokenRequest) (*GetAccessTokenResponse, error)
	LoginQrCodeCreate(context.Context, *LoginQrCodeCreateRequest) (*LoginQrCodeCreateResponse, error)
	GetWxUserInfoByCode(context.Context, *GetWxUserInfoByCodeRequest) (*GetWxUserInfoByCodeResponse, error)
	LoginUrlCreate(context.Context, *LoginUrlCreateRequest) (*LoginUrlCreateResponse, error)
	mustEmbedUnimplementedWxopenServer()
}

// UnimplementedWxopenServer must be embedded to have forward compatible implementations.
type UnimplementedWxopenServer struct {
}

func (UnimplementedWxopenServer) GetAccessToken(context.Context, *GetAccessTokenRequest) (*GetAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessToken not implemented")
}
func (UnimplementedWxopenServer) LoginQrCodeCreate(context.Context, *LoginQrCodeCreateRequest) (*LoginQrCodeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginQrCodeCreate not implemented")
}
func (UnimplementedWxopenServer) GetWxUserInfoByCode(context.Context, *GetWxUserInfoByCodeRequest) (*GetWxUserInfoByCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWxUserInfoByCode not implemented")
}
func (UnimplementedWxopenServer) LoginUrlCreate(context.Context, *LoginUrlCreateRequest) (*LoginUrlCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUrlCreate not implemented")
}
func (UnimplementedWxopenServer) mustEmbedUnimplementedWxopenServer() {}

// UnsafeWxopenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WxopenServer will
// result in compilation errors.
type UnsafeWxopenServer interface {
	mustEmbedUnimplementedWxopenServer()
}

func RegisterWxopenServer(s grpc.ServiceRegistrar, srv WxopenServer) {
	s.RegisterService(&Wxopen_ServiceDesc, srv)
}

func _Wxopen_GetAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxopenServer).GetAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wxopen_GetAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxopenServer).GetAccessToken(ctx, req.(*GetAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wxopen_LoginQrCodeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginQrCodeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxopenServer).LoginQrCodeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wxopen_LoginQrCodeCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxopenServer).LoginQrCodeCreate(ctx, req.(*LoginQrCodeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wxopen_GetWxUserInfoByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWxUserInfoByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxopenServer).GetWxUserInfoByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wxopen_GetWxUserInfoByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxopenServer).GetWxUserInfoByCode(ctx, req.(*GetWxUserInfoByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wxopen_LoginUrlCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUrlCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WxopenServer).LoginUrlCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wxopen_LoginUrlCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WxopenServer).LoginUrlCreate(ctx, req.(*LoginUrlCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Wxopen_ServiceDesc is the grpc.ServiceDesc for Wxopen service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wxopen_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.wxopen.Wxopen",
	HandlerType: (*WxopenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccessToken",
			Handler:    _Wxopen_GetAccessToken_Handler,
		},
		{
			MethodName: "LoginQrCodeCreate",
			Handler:    _Wxopen_LoginQrCodeCreate_Handler,
		},
		{
			MethodName: "GetWxUserInfoByCode",
			Handler:    _Wxopen_GetWxUserInfoByCode_Handler,
		},
		{
			MethodName: "LoginUrlCreate",
			Handler:    _Wxopen_LoginUrlCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/wxopen/wxopen.proto",
}
