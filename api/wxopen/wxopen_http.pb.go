// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.23.2
// source: api/wxopen/wxopen.proto

package wxopen

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWxopenGetAccessToken = "/api.wxopen.Wxopen/GetAccessToken"
const OperationWxopenGetWxUserInfoByCode = "/api.wxopen.Wxopen/GetWxUserInfoByCode"
const OperationWxopenLoginQrCodeCreate = "/api.wxopen.Wxopen/LoginQrCodeCreate"
const OperationWxopenLoginUrlCreate = "/api.wxopen.Wxopen/LoginUrlCreate"

type WxopenHTTPServer interface {
	GetAccessToken(context.Context, *GetAccessTokenRequest) (*GetAccessTokenResponse, error)
	GetWxUserInfoByCode(context.Context, *GetWxUserInfoByCodeRequest) (*GetWxUserInfoByCodeResponse, error)
	LoginQrCodeCreate(context.Context, *LoginQrCodeCreateRequest) (*LoginQrCodeCreateResponse, error)
	LoginUrlCreate(context.Context, *LoginUrlCreateRequest) (*LoginUrlCreateResponse, error)
}

func RegisterWxopenHTTPServer(s *http.Server, srv WxopenHTTPServer) {
	r := s.Route("/")
	r.POST("/GetAccessToken", _Wxopen_GetAccessToken0_HTTP_Handler(srv))
	r.POST("/LoginQrCodeCreate", _Wxopen_LoginQrCodeCreate0_HTTP_Handler(srv))
	r.POST("/GetWxUserInfoByCode", _Wxopen_GetWxUserInfoByCode0_HTTP_Handler(srv))
	r.POST("/LoginUrlCreate", _Wxopen_LoginUrlCreate0_HTTP_Handler(srv))
}

func _Wxopen_GetAccessToken0_HTTP_Handler(srv WxopenHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAccessTokenRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWxopenGetAccessToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccessToken(ctx, req.(*GetAccessTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAccessTokenResponse)
		return ctx.Result(200, reply)
	}
}

func _Wxopen_LoginQrCodeCreate0_HTTP_Handler(srv WxopenHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginQrCodeCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWxopenLoginQrCodeCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginQrCodeCreate(ctx, req.(*LoginQrCodeCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginQrCodeCreateResponse)
		return ctx.Result(200, reply)
	}
}

func _Wxopen_GetWxUserInfoByCode0_HTTP_Handler(srv WxopenHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWxUserInfoByCodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWxopenGetWxUserInfoByCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWxUserInfoByCode(ctx, req.(*GetWxUserInfoByCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWxUserInfoByCodeResponse)
		return ctx.Result(200, reply)
	}
}

func _Wxopen_LoginUrlCreate0_HTTP_Handler(srv WxopenHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginUrlCreateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWxopenLoginUrlCreate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginUrlCreate(ctx, req.(*LoginUrlCreateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginUrlCreateResponse)
		return ctx.Result(200, reply)
	}
}

type WxopenHTTPClient interface {
	GetAccessToken(ctx context.Context, req *GetAccessTokenRequest, opts ...http.CallOption) (rsp *GetAccessTokenResponse, err error)
	GetWxUserInfoByCode(ctx context.Context, req *GetWxUserInfoByCodeRequest, opts ...http.CallOption) (rsp *GetWxUserInfoByCodeResponse, err error)
	LoginQrCodeCreate(ctx context.Context, req *LoginQrCodeCreateRequest, opts ...http.CallOption) (rsp *LoginQrCodeCreateResponse, err error)
	LoginUrlCreate(ctx context.Context, req *LoginUrlCreateRequest, opts ...http.CallOption) (rsp *LoginUrlCreateResponse, err error)
}

type WxopenHTTPClientImpl struct {
	cc *http.Client
}

func NewWxopenHTTPClient(client *http.Client) WxopenHTTPClient {
	return &WxopenHTTPClientImpl{client}
}

func (c *WxopenHTTPClientImpl) GetAccessToken(ctx context.Context, in *GetAccessTokenRequest, opts ...http.CallOption) (*GetAccessTokenResponse, error) {
	var out GetAccessTokenResponse
	pattern := "/GetAccessToken"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWxopenGetAccessToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WxopenHTTPClientImpl) GetWxUserInfoByCode(ctx context.Context, in *GetWxUserInfoByCodeRequest, opts ...http.CallOption) (*GetWxUserInfoByCodeResponse, error) {
	var out GetWxUserInfoByCodeResponse
	pattern := "/GetWxUserInfoByCode"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWxopenGetWxUserInfoByCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WxopenHTTPClientImpl) LoginQrCodeCreate(ctx context.Context, in *LoginQrCodeCreateRequest, opts ...http.CallOption) (*LoginQrCodeCreateResponse, error) {
	var out LoginQrCodeCreateResponse
	pattern := "/LoginQrCodeCreate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWxopenLoginQrCodeCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WxopenHTTPClientImpl) LoginUrlCreate(ctx context.Context, in *LoginUrlCreateRequest, opts ...http.CallOption) (*LoginUrlCreateResponse, error) {
	var out LoginUrlCreateResponse
	pattern := "/LoginUrlCreate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWxopenLoginUrlCreate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
