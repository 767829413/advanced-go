// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package tool

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadTool returns the embedded CollectionSpec for Tool.
func LoadTool() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ToolBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Tool: %w", err)
	}

	return spec, err
}

// LoadToolObjects loads Tool and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ToolObjects
//	*ToolPrograms
//	*ToolMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadToolObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadTool()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ToolSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ToolSpecs struct {
	ToolProgramSpecs
	ToolMapSpecs
}

// ToolSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ToolProgramSpecs struct {
	UprobeMysqlDispatchCommand    *ebpf.ProgramSpec `ebpf:"uprobe_mysql_dispatch_command"`
	UretprobeMysqlDispatchCommand *ebpf.ProgramSpec `ebpf:"uretprobe_mysql_dispatch_command"`
}

// ToolMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ToolMapSpecs struct {
	CommSql    *ebpf.MapSpec `ebpf:"comm_sql"`
	Events     *ebpf.MapSpec `ebpf:"events"`
	StartTimes *ebpf.MapSpec `ebpf:"start_times"`
}

// ToolObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadToolObjects or ebpf.CollectionSpec.LoadAndAssign.
type ToolObjects struct {
	ToolPrograms
	ToolMaps
}

func (o *ToolObjects) Close() error {
	return _ToolClose(
		&o.ToolPrograms,
		&o.ToolMaps,
	)
}

// ToolMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadToolObjects or ebpf.CollectionSpec.LoadAndAssign.
type ToolMaps struct {
	CommSql    *ebpf.Map `ebpf:"comm_sql"`
	Events     *ebpf.Map `ebpf:"events"`
	StartTimes *ebpf.Map `ebpf:"start_times"`
}

func (m *ToolMaps) Close() error {
	return _ToolClose(
		m.CommSql,
		m.Events,
		m.StartTimes,
	)
}

// ToolPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadToolObjects or ebpf.CollectionSpec.LoadAndAssign.
type ToolPrograms struct {
	UprobeMysqlDispatchCommand    *ebpf.Program `ebpf:"uprobe_mysql_dispatch_command"`
	UretprobeMysqlDispatchCommand *ebpf.Program `ebpf:"uretprobe_mysql_dispatch_command"`
}

func (p *ToolPrograms) Close() error {
	return _ToolClose(
		p.UprobeMysqlDispatchCommand,
		p.UretprobeMysqlDispatchCommand,
	)
}

func _ToolClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tool_x86_bpfel.o
var _ToolBytes []byte
