// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package minimal

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadMinimal returns the embedded CollectionSpec for Minimal.
func LoadMinimal() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_MinimalBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Minimal: %w", err)
	}

	return spec, err
}

// LoadMinimalObjects loads Minimal and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*MinimalObjects
//	*MinimalPrograms
//	*MinimalMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadMinimalObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadMinimal()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// MinimalSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type MinimalSpecs struct {
	MinimalProgramSpecs
	MinimalMapSpecs
}

// MinimalSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type MinimalProgramSpecs struct {
	HandleTp *ebpf.ProgramSpec `ebpf:"handle_tp"`
}

// MinimalMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type MinimalMapSpecs struct {
	LastOutput *ebpf.MapSpec `ebpf:"last_output"`
}

// MinimalObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadMinimalObjects or ebpf.CollectionSpec.LoadAndAssign.
type MinimalObjects struct {
	MinimalPrograms
	MinimalMaps
}

func (o *MinimalObjects) Close() error {
	return _MinimalClose(
		&o.MinimalPrograms,
		&o.MinimalMaps,
	)
}

// MinimalMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadMinimalObjects or ebpf.CollectionSpec.LoadAndAssign.
type MinimalMaps struct {
	LastOutput *ebpf.Map `ebpf:"last_output"`
}

func (m *MinimalMaps) Close() error {
	return _MinimalClose(
		m.LastOutput,
	)
}

// MinimalPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadMinimalObjects or ebpf.CollectionSpec.LoadAndAssign.
type MinimalPrograms struct {
	HandleTp *ebpf.Program `ebpf:"handle_tp"`
}

func (p *MinimalPrograms) Close() error {
	return _MinimalClose(
		p.HandleTp,
	)
}

func _MinimalClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed minimal_bpfeb.o
var _MinimalBytes []byte
